syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Proto";

package chain;

message Node {
	string host = 1;
	int32 port = 2;
	string name = 3;
}

message Topology {
	Node previousNode = 1;
	Node nextNode = 2;
	Node nextNextNode = 3;
	Node leader = 4;
}

message ConnectRequest {
	Node nodeWantsToConnect = 1; // node that requests to connect
}

message ConnectResponse {
	bool isOk = 1; // true if requesting node can connect, false if other node already connected
	Topology topology = 2;
}

message DisconnectRequest {
	Node connectToNode = 1;
}

message DisconnectResponse {
	bool isOk = 1;
}

message LeaderElectionRequest {
	Node leaderNode = 1;
	string electionLoopId = 2;
	google.protobuf.Timestamp leaderConnectionTimestamp = 3;
}

message LeaderElectionResponse {
	bool isOk = 1;
}

message ChatRequest {
	Node startedByNode = 1;
	string chatId = 2;
	string message = 3;
	string messageChain = 4;
}

message ChatResponse {
	bool isOk = 1;
}

message SetNextNextNodeRequest {
	Node nextNextNode = 2;
}

message SetNextNextNodeResponse {
	bool isOk = 1;
}

service ChainService {

	// Connect to node. Node that was requsted to connect to will ask previous node to disconnect from it and connect to requesting node.
	rpc Connect (ConnectRequest) returns (ConnectResponse) {}

	// Ask node to disconnect from the node and connect to other
	rpc Disconnect (DisconnectRequest) returns (DisconnectResponse) {}

	rpc SetNextNextNode (SetNextNextNodeRequest) returns (SetNextNextNodeResponse) {}

	rpc ElectLeader (LeaderElectionRequest) returns (LeaderElectionResponse) {}

	rpc Chat (ChatRequest) returns (ChatResponse) {}
}